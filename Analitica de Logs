{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/TREXNEGRO/BP_Colombia_Pishing/blob/main/Analitica%20de%20Logs\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Instalar y cargar bibliotecas necesarias\n",
        "import pandas as pd\n",
        "from google.colab import files\n",
        "\n",
        "# Cargar archivos de logs CSV desde tu dispositivo local a Google Colab\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Leer el archivo de logs CSV\n",
        "import io\n",
        "file_name = list(uploaded.keys())[0]\n",
        "logs = pd.read_csv(io.BytesIO(uploaded[file_name]))\n",
        "\n",
        "# Mostrar las primeras filas para entender la estructura y las columnas disponibles\n",
        "print(logs.head())\n",
        "print(\"\\nColumnas disponibles:\")\n",
        "print(logs.columns)\n",
        "\n",
        "# Función para buscar y filtrar eventos específicos\n",
        "def analizar_eventos(logs):\n",
        "    resultados = {}\n",
        "\n",
        "    # Filtrar múltiples intentos de inicio de sesión fallidos\n",
        "    if 'resultado' in logs.columns:\n",
        "        intentos_fallidos = logs[logs['resultado'] == 'fallido']\n",
        "        resultados['intentos_fallidos'] = intentos_fallidos\n",
        "        print(\"\\nIntentos de inicio de sesión fallidos:\")\n",
        "        print(intentos_fallidos)\n",
        "    else:\n",
        "        print(\"\\nLa columna 'resultado' no está presente en el DataFrame.\")\n",
        "\n",
        "    # Filtrar actividad inusual desde una IP específica\n",
        "    ip_sospechosa = 'dirección_ip_sospechosa'  # Reemplaza esto con la IP que quieras analizar\n",
        "    if 'ip' in logs.columns:\n",
        "        actividad_inusual = logs[logs['ip'] == ip_sospechosa]\n",
        "        resultados['actividad_inusual'] = actividad_inusual\n",
        "        print(\"\\nActividad inusual desde una IP específica:\")\n",
        "        print(actividad_inusual)\n",
        "    else:\n",
        "        print(\"\\nLa columna 'ip' no está presente en el DataFrame.\")\n",
        "\n",
        "    # Filtrar por patrones comunes de ataques, como escaneo de puertos\n",
        "    if 'mensaje' in logs.columns:\n",
        "        escaneo_puertos = logs[logs['mensaje'].str.contains('escaneo de puertos', case=False)]\n",
        "        resultados['escaneo_puertos'] = escaneo_puertos\n",
        "        print(\"\\nPatrones de escaneo de puertos:\")\n",
        "        print(escaneo_puertos)\n",
        "    else:\n",
        "        print(\"\\nLa columna 'mensaje' no está presente en el DataFrame.\")\n",
        "\n",
        "    return resultados\n",
        "\n",
        "resultados = analizar_eventos(logs)\n",
        "\n",
        "# Función para guardar los resultados filtrados en archivos CSV\n",
        "def guardar_resultados(resultados):\n",
        "    for nombre, dataframe in resultados.items():\n",
        "        archivo = f'{nombre}.csv'\n",
        "        dataframe.to_csv(archivo, index=False)\n",
        "        print(f\"\\n{archivo} guardado correctamente.\")\n",
        "\n",
        "guardar_resultados(resultados)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6MPYQWsG7eiT",
        "outputId": "da8f6920-367d-41c5-90cf-f22385258751"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-5a3275f8-ed19-4cb5-9ca3-4d6d862d0d86\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-5a3275f8-ed19-4cb5-9ca3-4d6d862d0d86\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving security_events_waf_Alianza Valle_1720216536535 (1).csv to security_events_waf_Alianza Valle_1720216536535 (1) (1).csv\n",
            "Saving security_events_waf_Alianza Valle_1720216536535.csv to security_events_waf_Alianza Valle_1720216536535 (2).csv\n",
            "     action                                        description  \\\n",
            "0   Blocked                                                NaN   \n",
            "1  Reported                                                NaN   \n",
            "2   Blocked  There was an attempt to retrieve file which ma...   \n",
            "3  Reported                                                NaN   \n",
            "4   Blocked                         Geo-blocking violation: UA   \n",
            "\n",
            "                                             details                directory  \\\n",
            "0                                                NaN                      NaN   \n",
            "1  AppWall FastUpload has detected a large file u...  /ApiCore/ServiciosCore/   \n",
            "2  Vulnerabilities Security Filter intercepted a ...                        /   \n",
            "3  AppWall FastUpload has detected a large file u...  /ApiCore/ServiciosCore/   \n",
            "4                         Geo-blocking violation: UA                      NaN   \n",
            "\n",
            "  countryCode owaspCategory                         applicationId  \\\n",
            "0          US           NaN  d4c1fda6-9d8b-42ac-9791-bf6a5120610d   \n",
            "1          EC           NaN  191d00b3-be86-4745-ab44-346e441ed81d   \n",
            "2          US            A2  2866105e-2b1d-4dc3-b0ca-a0a8e8c1e026   \n",
            "3          EC           NaN  191d00b3-be86-4745-ab44-346e441ed81d   \n",
            "4          UA           NaN  f26e6533-663b-4838-9b7d-6d4cc9e3672f   \n",
            "\n",
            "            applicationName                              tenantId  \\\n",
            "0             API APP VIEJO  afe78392-8edc-43e2-9d79-898cc3135775   \n",
            "1        API Talento Humano  afe78392-8edc-43e2-9d79-898cc3135775   \n",
            "2        Pagina Informativa  afe78392-8edc-43e2-9d79-898cc3135775   \n",
            "3        API Talento Humano  afe78392-8edc-43e2-9d79-898cc3135775   \n",
            "4  APP Movil Acceso Externo  afe78392-8edc-43e2-9d79-898cc3135775   \n",
            "\n",
            "      tenantName  ...      externalIp sourcePort     targetModule  \\\n",
            "0  Alianza Valle  ...   205.210.31.55      44391   Advanced Rules   \n",
            "1  Alianza Valle  ...    200.7.246.30      44840    Tunnel Module   \n",
            "2  Alianza Valle  ...      20.75.44.0      31288  Vulnerabilities   \n",
            "3  Alianza Valle  ...   200.7.247.193      62888    Tunnel Module   \n",
            "4  Alianza Valle  ...  146.19.186.204      65443     Geo-Blocking   \n",
            "\n",
            "           protection                       title  \\\n",
            "0                 NaN                         NaN   \n",
            "1       Tunnel Module        Fastupload activated   \n",
            "2  Known Attack Types  Pattern Violation Detected   \n",
            "3       Tunnel Module        Fastupload activated   \n",
            "4        Geo Blocking                         NaN   \n",
            "\n",
            "                                             transId  \\\n",
            "0  c824e3af7d306788f52734c202e30528adf99ab6c29d65...   \n",
            "1                                          213063935   \n",
            "2                                         2200718857   \n",
            "3                                          213063910   \n",
            "4  053a56c1f7bf34d55a4e42a85471470889807af395b776...   \n",
            "\n",
            "                                uri    violationCategory  \\\n",
            "0                                 /                  NaN   \n",
            "1   /ApiCore/ServiciosCore/Mantener    Large File Upload   \n",
            "2                        /.user.ini  Information Leakage   \n",
            "3  /ApiCore/ServiciosCore/Consultar    Large File Upload   \n",
            "4          /api/Seguridades/Version                  NaN   \n",
            "\n",
            "                violationType  vulnData  \n",
            "0               Security Rule       NaN  \n",
            "1           Large File Upload       NaN  \n",
            "2  Server Information Leakage      .ini  \n",
            "3           Large File Upload       NaN  \n",
            "4                Geo-Blocking       NaN  \n",
            "\n",
            "[5 rows x 38 columns]\n",
            "\n",
            "Columnas disponibles:\n",
            "Index(['action', 'description', 'details', 'directory', 'countryCode',\n",
            "       'owaspCategory', 'applicationId', 'applicationName', 'tenantId',\n",
            "       'tenantName', 'example', 'extension', 'host', 'method', 'paramName',\n",
            "       'paramType', 'paramValue', 'params', 'passive', 'patternId', 'protocol',\n",
            "       'receivedTimeStamp', 'receivedTimeFormatted', 'refineDate',\n",
            "       'refineDateFormatted', 'request', 'ruleId', 'severity', 'externalIp',\n",
            "       'sourcePort', 'targetModule', 'protection', 'title', 'transId', 'uri',\n",
            "       'violationCategory', 'violationType', 'vulnData'],\n",
            "      dtype='object')\n",
            "\n",
            "La columna 'resultado' no está presente en el DataFrame.\n",
            "\n",
            "La columna 'ip' no está presente en el DataFrame.\n",
            "\n",
            "La columna 'mensaje' no está presente en el DataFrame.\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Te damos la bienvenida a Colaboratory",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}